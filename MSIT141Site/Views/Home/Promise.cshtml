
@{
    ViewData["Title"] = "Promise";
}

<h1>Promise</h1>

@section Scripts {
<script>
    //建立Promise物件
    const promise = new Promise((resolve, reject) => {
        //非同步程式
        const num = Math.random() > 0.5 ? 1 : 0;
        console.log(num);
        if (num) {
            resolve("成功");  //成功取得資料時，回傳資料；這行在設定回傳resolve的情況
        }
        else {
            reject("失敗");   //失敗時回傳error object；這行在設定回傳reject的情況
        }
    });
    //使用Promise物件
    promise.then((result)=> {   //.then()接住resolve的結果
        console.log(result)
    }).catch((error) => {   //.catch()接住reject的結果
        console.log(error)
    }).finally(()=>{
        console.log("end");
    })

    //回傳Promise物件的方法
    function printSomething(data) {
        const promise = new Promise((resolve, reject) => {
            setTimeout(() => { resolve(data), 1000 }); 
        })
        return promise;
    }

    printSomething("A").then((data) => {
        console.log(data);
        return printSomething("B");
    }).then((data) => {
        console.log(data);
        return printSomething("C");
    }).then((data) => {
        console.log(data);
    })

</script>
 }